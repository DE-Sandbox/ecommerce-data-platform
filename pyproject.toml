[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ecommerce-data-platform"
version = "0.1.0"
description = "E-commerce data engineering platform with lakehouse architecture"
authors = [{name = "Data Engineering Team"}]
requires-python = ">=3.11"
dependencies = [
    "dagster>=1.11.3",
    "dbt-core>=1.10.5",
    "deltalake>=0.20.0",
    "pandas>=2.2.0",
    "boto3>=1.35.0",
    "pydantic>=2.10.0",
    "fastapi>=0.115.0",
    "uvicorn>=0.32.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.0",
    "pytest-cov>=6.0.0",
    "pytest-watch>=4.2.0",
    "black>=25.1.0",
    "isort>=5.13.0",
    "flake8>=7.1.0",
    "mypy>=1.13.0",
    "bandit>=1.8.0",
    "pre-commit>=4.0.0",
    "sqlfluff>=3.2.0",
    "yamllint>=1.35.0",
    "ruff>=0.8.0",
    "pip-audit>=2.8.0",
]

[tool.black]
line-length = 88
target-version = ['py313']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]
known_third_party = ["dagster", "dbt", "pandas", "boto3", "pydantic", "fastapi"]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "delta.*",
    "dagster.*",
    "dbt.*",
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py313"
line-length = 88

[tool.ruff.lint]
select = [
    "ALL",  # Enable all available rules
]
ignore = [
    "E501",   # line too long, handled by formatter
    "D",      # pydocstyle (use only when needed)
    "ANN",    # flake8-annotations (mypy handles this)
    "COM",    # flake8-commas (formatter handles this)
    "CPY",    # flake8-copyright
    "EM",     # flake8-errmsg
    "ERA",    # eradicate (commented code)
    "FBT",    # flake8-boolean-trap
    "G",      # flake8-logging-format
    "INP",    # flake8-no-pep420
    "PIE",    # flake8-pie
    "PLR",    # pylint refactor
    "PT",     # flake8-pytest-style
    "PTH",    # flake8-use-pathlib
    "T20",    # flake8-print
    "TD",     # flake8-todos
    "TRY",    # tryceratops
    "S101",   # assert
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "PLR2004", "SLF001"]  # Allow assert, magic values, private access in tests
"scripts/*" = ["T201"]  # Allow print in scripts

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["src"]
known-third-party = ["dagster", "dbt", "pandas", "boto3", "pydantic", "fastapi"]

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["fastapi.Depends"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]