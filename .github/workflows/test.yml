name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ecommerce
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    
    - name: Install dependencies
      run: |
        uv sync --frozen --all-extras
    
    - name: Install PostgreSQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
    
    - name: Initialize database
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_NAME: ecommerce
      run: |
        # Wait for PostgreSQL to be ready
        for i in {1..30}; do
          if pg_isready -h localhost -p 5432 -U postgres; then
            break
          fi
          echo "Waiting for PostgreSQL..."
          sleep 1
        done
        
        # Run schema initialization
        PGPASSWORD=postgres psql -h localhost -U postgres -d ecommerce -f sql/schema/001_initial_schema.sql
    
    - name: Run linters
      run: |
        uv run ruff check src/ tests/
        uv run ruff format --check src/ tests/
        uv run sqlfluff lint sql/
        # Lint models/ only if it exists
        if [ -d models/ ]; then uv run sqlfluff lint models/; fi
    
    - name: Run type checking
      run: |
        uv run mypy src/
    
    - name: Run all tests with coverage
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_NAME: ecommerce
      run: |
        uv run python scripts/test_changed_files.py --ci
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: success()
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false