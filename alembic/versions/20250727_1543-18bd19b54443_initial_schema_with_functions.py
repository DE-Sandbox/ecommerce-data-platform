"""Initial schema with functions.

Revision ID: 18bd19b54443
Revises:
Create Date: 2025-07-27 15:43:14.510868

"""
from collections.abc import Sequence

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op
from src.database.functions import (
    audit_trigger_function,
    uuid_generate_v7,
    uuid_generate_v7_precise,
)

# revision identifiers, used by Alembic.
revision: str = "18bd19b54443"
down_revision: str | Sequence[str] | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Create functions first - these are needed by tables
    op.execute(uuid_generate_v7.to_sql_statement_create())
    op.execute(uuid_generate_v7_precise.to_sql_statement_create())
    op.execute(audit_trigger_function.to_sql_statement_create())

    # Now create tables
    op.create_table("audit_log",
    sa.Column("id", sa.UUID(as_uuid=False), server_default=sa.text("UUID_GENERATE_V7()"), nullable=False),
    sa.Column("table_name", sa.String(length=255), nullable=False),
    sa.Column("record_id", sa.UUID(as_uuid=False), nullable=False),
    sa.Column("action", sa.String(length=10), nullable=False),
    sa.Column("user_id", sa.UUID(as_uuid=False), nullable=True),
    sa.Column("timestamp", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("old_values", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column("new_values", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column("changed_fields", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column("ip_address", postgresql.INET(), nullable=True),
    sa.Column("user_agent", sa.Text(), nullable=True),
    sa.Column("audit_metadata", postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False),
    sa.PrimaryKeyConstraint("id", name=op.f("pk_audit_log")),
    schema="audit"
    )
    op.create_table("categories",
    sa.Column("name", sa.String(length=100), nullable=False),
    sa.Column("slug", sa.String(length=100), nullable=False),
    sa.Column("description", sa.Text(), nullable=True),
    sa.Column("parent_id", sa.UUID(as_uuid=False), nullable=True),
    sa.Column("display_order", sa.Integer(), server_default=sa.text("0"), nullable=False),
    sa.Column("is_active", sa.Boolean(), server_default=sa.text("TRUE"), nullable=False),
    sa.Column("category_metadata", postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False),
    sa.Column("id", sa.UUID(as_uuid=False), server_default=sa.text("UUID_GENERATE_V7()"), nullable=False),
    sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
    sa.Column("is_deleted", sa.Boolean(), server_default=sa.text("FALSE"), nullable=False),
    sa.ForeignKeyConstraint(["parent_id"], ["ecommerce.categories.id"], name=op.f("fk_categories_parent_id_categories")),
    sa.PrimaryKeyConstraint("id", name=op.f("pk_categories")),
    sa.UniqueConstraint("name", name=op.f("uq_categories_name")),
    sa.UniqueConstraint("slug", name=op.f("uq_categories_slug")),
    schema="ecommerce"
    )
    op.create_table("customers",
    sa.Column("email", sa.String(length=255), nullable=False),
    sa.Column("email_verified", sa.Boolean(), server_default=sa.text("FALSE"), nullable=False),
    sa.Column("status", sa.String(length=50), server_default=sa.text("'active'"), nullable=False),
    sa.Column("customer_type", sa.String(length=50), server_default=sa.text("'individual'"), nullable=False),
    sa.Column("customer_metadata", postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False),
    sa.Column("id", sa.UUID(as_uuid=False), server_default=sa.text("UUID_GENERATE_V7()"), nullable=False),
    sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
    sa.Column("is_deleted", sa.Boolean(), server_default=sa.text("FALSE"), nullable=False),
    sa.Column("version", sa.Integer(), server_default=sa.text("1"), nullable=False),
    sa.CheckConstraint("customer_type IN ('individual', 'business')", name=op.f("ck_customers_ck_customers_customer_type")),
    sa.CheckConstraint("status IN ('active', 'inactive', 'suspended', 'deleted')", name=op.f("ck_customers_ck_customers_status")),
    sa.PrimaryKeyConstraint("id", name=op.f("pk_customers")),
    sa.UniqueConstraint("email", name=op.f("uq_customers_email")),
    schema="ecommerce"
    )
    op.create_table("locations",
    sa.Column("code", sa.String(length=50), nullable=False),
    sa.Column("name", sa.String(length=255), nullable=False),
    sa.Column("type", sa.String(length=50), server_default=sa.text("'warehouse'"), nullable=False),
    sa.Column("address", sa.Text(), nullable=True),
    sa.Column("is_active", sa.Boolean(), server_default=sa.text("TRUE"), nullable=False),
    sa.Column("location_metadata", postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False),
    sa.Column("id", sa.UUID(as_uuid=False), server_default=sa.text("UUID_GENERATE_V7()"), nullable=False),
    sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
    sa.Column("is_deleted", sa.Boolean(), server_default=sa.text("FALSE"), nullable=False),
    sa.CheckConstraint("type IN ('warehouse', 'store', 'dropship')", name=op.f("ck_locations_ck_locations_type")),
    sa.PrimaryKeyConstraint("id", name=op.f("pk_locations")),
    sa.UniqueConstraint("code", name=op.f("uq_locations_code")),
    schema="ecommerce"
    )
    op.create_table("addresses",
    sa.Column("customer_id", sa.UUID(as_uuid=False), nullable=False),
    sa.Column("type", sa.String(length=50), server_default=sa.text("'shipping'"), nullable=False),
    sa.Column("recipient_name", sa.String(length=200), nullable=True),
    sa.Column("street_address_1", sa.String(length=255), nullable=False),
    sa.Column("street_address_2", sa.String(length=255), nullable=True),
    sa.Column("city", sa.String(length=100), nullable=False),
    sa.Column("state_province", sa.String(length=100), nullable=True),
    sa.Column("postal_code", sa.String(length=20), nullable=True),
    sa.Column("country_code", sa.String(length=2), nullable=False),
    sa.Column("phone", sa.String(length=50), nullable=True),
    sa.Column("is_default", sa.Boolean(), server_default=sa.text("FALSE"), nullable=False),
    sa.Column("address_metadata", postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False),
    sa.Column("id", sa.UUID(as_uuid=False), server_default=sa.text("UUID_GENERATE_V7()"), nullable=False),
    sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
    sa.Column("is_deleted", sa.Boolean(), server_default=sa.text("FALSE"), nullable=False),
    sa.Column("version", sa.Integer(), server_default=sa.text("1"), nullable=False),
    sa.CheckConstraint("type IN ('shipping', 'billing', 'both')", name=op.f("ck_addresses_ck_addresses_type")),
    sa.ForeignKeyConstraint(["customer_id"], ["ecommerce.customers.id"], name=op.f("fk_addresses_customer_id_customers"), ondelete="CASCADE"),
    sa.PrimaryKeyConstraint("id", name=op.f("pk_addresses")),
    schema="ecommerce"
    )
    op.create_table("carts",
    sa.Column("customer_id", sa.UUID(as_uuid=False), nullable=True),
    sa.Column("session_id", sa.String(length=255), nullable=True),
    sa.Column("status", sa.String(length=50), server_default=sa.text("'active'"), nullable=False),
    sa.Column("expires_at", sa.DateTime(timezone=True), nullable=True),
    sa.Column("cart_metadata", postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False),
    sa.Column("id", sa.UUID(as_uuid=False), server_default=sa.text("UUID_GENERATE_V7()"), nullable=False),
    sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
    sa.Column("is_deleted", sa.Boolean(), server_default=sa.text("FALSE"), nullable=False),
    sa.CheckConstraint("status IN ('active', 'abandoned', 'converted', 'merged')", name=op.f("ck_carts_ck_carts_status")),
    sa.CheckConstraint("(customer_id IS NOT NULL) OR (session_id IS NOT NULL)", name=op.f("ck_carts_ck_carts_customer_or_session")),
    sa.ForeignKeyConstraint(["customer_id"], ["ecommerce.customers.id"], name=op.f("fk_carts_customer_id_customers")),
    sa.PrimaryKeyConstraint("id", name=op.f("pk_carts")),
    schema="ecommerce"
    )
    op.create_table("customer_consents",
    sa.Column("customer_id", sa.UUID(as_uuid=False), nullable=False),
    sa.Column("consent_type", sa.String(length=100), nullable=False),
    sa.Column("granted", sa.Boolean(), nullable=False),
    sa.Column("granted_at", sa.DateTime(timezone=True), nullable=True),
    sa.Column("revoked_at", sa.DateTime(timezone=True), nullable=True),
    sa.Column("ip_address", postgresql.INET(), nullable=True),
    sa.Column("user_agent", sa.String(), nullable=True),
    sa.Column("id", sa.UUID(as_uuid=False), server_default=sa.text("UUID_GENERATE_V7()"), nullable=False),
    sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
    sa.Column("is_deleted", sa.Boolean(), server_default=sa.text("FALSE"), nullable=False),
    sa.CheckConstraint("consent_type IN ('marketing', 'analytics', 'third_party', 'cookies')", name=op.f("ck_customer_consents_ck_customer_consents_consent_type")),
    sa.ForeignKeyConstraint(["customer_id"], ["ecommerce.customers.id"], name=op.f("fk_customer_consents_customer_id_customers"), ondelete="CASCADE"),
    sa.PrimaryKeyConstraint("id", name=op.f("pk_customer_consents")),
    schema="ecommerce"
    )
    op.create_table("customer_pii",
    sa.Column("customer_id", sa.UUID(as_uuid=False), nullable=False),
    sa.Column("first_name", sa.String(length=100), nullable=True),
    sa.Column("last_name", sa.String(length=100), nullable=True),
    sa.Column("phone", sa.String(length=50), nullable=True),
    sa.Column("date_of_birth", sa.Date(), nullable=True),
    sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
    sa.Column("is_deleted", sa.Boolean(), server_default=sa.text("FALSE"), nullable=False),
    sa.ForeignKeyConstraint(["customer_id"], ["ecommerce.customers.id"], name=op.f("fk_customer_pii_customer_id_customers"), ondelete="CASCADE"),
    sa.PrimaryKeyConstraint("customer_id", name=op.f("pk_customer_pii")),
    schema="ecommerce"
    )
    op.create_table("orders",
    sa.Column("customer_id", sa.UUID(as_uuid=False), nullable=True),
    sa.Column("order_number", sa.String(length=50), nullable=False),
    sa.Column("status", sa.String(length=50), server_default=sa.text("'pending'"), nullable=False),
    sa.Column("subtotal_cents", sa.Integer(), server_default=sa.text("0"), nullable=False),
    sa.Column("tax_cents", sa.Integer(), server_default=sa.text("0"), nullable=False),
    sa.Column("shipping_cents", sa.Integer(), server_default=sa.text("0"), nullable=False),
    sa.Column("discount_cents", sa.Integer(), server_default=sa.text("0"), nullable=False),
    sa.Column("total_cents", sa.Integer(), server_default=sa.text("0"), nullable=False),
    sa.Column("currency_code", sa.String(length=3), server_default=sa.text("'USD'"), nullable=False),
    sa.Column("shipping_address", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column("billing_address", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column("notes", sa.Text(), nullable=True),
    sa.Column("order_metadata", postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False),
    sa.Column("placed_at", sa.DateTime(timezone=True), nullable=True),
    sa.Column("shipped_at", sa.DateTime(timezone=True), nullable=True),
    sa.Column("delivered_at", sa.DateTime(timezone=True), nullable=True),
    sa.Column("cancelled_at", sa.DateTime(timezone=True), nullable=True),
    sa.Column("id", sa.UUID(as_uuid=False), server_default=sa.text("UUID_GENERATE_V7()"), nullable=False),
    sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("version", sa.Integer(), server_default=sa.text("1"), nullable=False),
    sa.CheckConstraint("status IN ('pending', 'confirmed', 'processing', 'shipped', 'delivered', 'cancelled', 'refunded')", name=op.f("ck_orders_ck_orders_status")),
    sa.CheckConstraint("discount_cents >= 0", name=op.f("ck_orders_ck_orders_discount_non_negative")),
    sa.CheckConstraint("shipping_cents >= 0", name=op.f("ck_orders_ck_orders_shipping_non_negative")),
    sa.CheckConstraint("subtotal_cents >= 0", name=op.f("ck_orders_ck_orders_subtotal_non_negative")),
    sa.CheckConstraint("tax_cents >= 0", name=op.f("ck_orders_ck_orders_tax_non_negative")),
    sa.CheckConstraint("total_cents = subtotal_cents + tax_cents + shipping_cents - discount_cents", name=op.f("ck_orders_ck_orders_total_calculation")),
    sa.ForeignKeyConstraint(["customer_id"], ["ecommerce.customers.id"], name=op.f("fk_orders_customer_id_customers")),
    sa.PrimaryKeyConstraint("id", name=op.f("pk_orders")),
    sa.UniqueConstraint("order_number", name=op.f("uq_orders_order_number")),
    schema="ecommerce"
    )
    op.create_index("idx_orders_created_at", "orders", ["created_at"], unique=False, schema="ecommerce")
    op.create_index("idx_orders_customer_id", "orders", ["customer_id"], unique=False, schema="ecommerce")
    op.create_index("idx_orders_status", "orders", ["status"], unique=False, schema="ecommerce")
    op.create_table("payment_methods",
    sa.Column("customer_id", sa.UUID(as_uuid=False), nullable=False),
    sa.Column("type", sa.String(length=50), nullable=False),
    sa.Column("provider", sa.String(length=50), nullable=False),
    sa.Column("token", sa.String(length=255), nullable=False),
    sa.Column("last_four", sa.String(length=4), nullable=True),
    sa.Column("expiry_month", sa.Integer(), nullable=True),
    sa.Column("expiry_year", sa.Integer(), nullable=True),
    sa.Column("is_default", sa.Boolean(), server_default=sa.text("FALSE"), nullable=False),
    sa.Column("payment_metadata", postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False),
    sa.Column("id", sa.UUID(as_uuid=False), server_default=sa.text("UUID_GENERATE_V7()"), nullable=False),
    sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
    sa.Column("is_deleted", sa.Boolean(), server_default=sa.text("FALSE"), nullable=False),
    sa.CheckConstraint("type IN ('credit_card', 'debit_card', 'paypal', 'apple_pay', 'google_pay')", name=op.f("ck_payment_methods_ck_payment_methods_type")),
    sa.ForeignKeyConstraint(["customer_id"], ["ecommerce.customers.id"], name=op.f("fk_payment_methods_customer_id_customers"), ondelete="CASCADE"),
    sa.PrimaryKeyConstraint("id", name=op.f("pk_payment_methods")),
    schema="ecommerce"
    )
    op.create_table("products",
    sa.Column("sku", sa.String(length=100), nullable=False),
    sa.Column("name", sa.String(length=255), nullable=False),
    sa.Column("slug", sa.String(length=255), nullable=False),
    sa.Column("description", sa.Text(), nullable=True),
    sa.Column("category_id", sa.UUID(as_uuid=False), nullable=True),
    sa.Column("brand", sa.String(length=100), nullable=True),
    sa.Column("status", sa.String(length=50), server_default=sa.text("'active'"), nullable=False),
    sa.Column("weight", sa.Numeric(precision=10, scale=3), nullable=True),
    sa.Column("dimensions", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column("product_metadata", postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False),
    sa.Column("tags", postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), nullable=False),
    sa.Column("id", sa.UUID(as_uuid=False), server_default=sa.text("UUID_GENERATE_V7()"), nullable=False),
    sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
    sa.Column("is_deleted", sa.Boolean(), server_default=sa.text("FALSE"), nullable=False),
    sa.Column("version", sa.Integer(), server_default=sa.text("1"), nullable=False),
    sa.CheckConstraint("status IN ('active', 'inactive', 'discontinued', 'draft')", name=op.f("ck_products_ck_products_status")),
    sa.ForeignKeyConstraint(["category_id"], ["ecommerce.categories.id"], name=op.f("fk_products_category_id_categories")),
    sa.PrimaryKeyConstraint("id", name=op.f("pk_products")),
    sa.UniqueConstraint("sku", name=op.f("uq_products_sku")),
    sa.UniqueConstraint("slug", name=op.f("uq_products_slug")),
    schema="ecommerce"
    )
    op.create_table("payments",
    sa.Column("id", sa.UUID(as_uuid=False), server_default=sa.text("UUID_GENERATE_V7()"), nullable=False),
    sa.Column("order_id", sa.UUID(as_uuid=False), nullable=False),
    sa.Column("payment_method_id", sa.UUID(as_uuid=False), nullable=True),
    sa.Column("type", sa.String(length=50), nullable=False),
    sa.Column("status", sa.String(length=50), server_default=sa.text("'pending'"), nullable=False),
    sa.Column("amount_cents", sa.Integer(), nullable=False),
    sa.Column("currency_code", sa.String(length=3), server_default=sa.text("'USD'"), nullable=False),
    sa.Column("provider", sa.String(length=50), nullable=True),
    sa.Column("provider_reference", sa.String(length=255), nullable=True),
    sa.Column("processed_at", sa.DateTime(timezone=True), nullable=True),
    sa.Column("failed_at", sa.DateTime(timezone=True), nullable=True),
    sa.Column("failure_reason", sa.String(length=500), nullable=True),
    sa.Column("payment_metadata", postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False),
    sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
    sa.Column("is_deleted", sa.Boolean(), server_default=sa.text("FALSE"), nullable=False),
    sa.CheckConstraint("status IN ('pending', 'processing', 'completed', 'failed', 'cancelled')", name=op.f("ck_payments_ck_payments_status")),
    sa.CheckConstraint("type IN ('payment', 'refund', 'partial_refund')", name=op.f("ck_payments_ck_payments_type")),
    sa.CheckConstraint("amount_cents > 0", name=op.f("ck_payments_ck_payments_amount_positive")),
    sa.ForeignKeyConstraint(["order_id"], ["ecommerce.orders.id"], name=op.f("fk_payments_order_id_orders")),
    sa.ForeignKeyConstraint(["payment_method_id"], ["ecommerce.payment_methods.id"], name=op.f("fk_payments_payment_method_id_payment_methods")),
    sa.PrimaryKeyConstraint("id", name=op.f("pk_payments")),
    schema="ecommerce"
    )
    op.create_table("product_prices",
    sa.Column("id", sa.UUID(as_uuid=False), server_default=sa.text("UUID_GENERATE_V7()"), nullable=False),
    sa.Column("product_id", sa.UUID(as_uuid=False), nullable=False),
    sa.Column("currency_code", sa.String(length=3), server_default=sa.text("'USD'"), nullable=False),
    sa.Column("price", sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column("compare_at_price", sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column("cost_price", sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column("valid_from", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("valid_until", sa.DateTime(timezone=True), nullable=True),
    sa.Column("is_active", sa.Boolean(), server_default=sa.text("TRUE"), nullable=False),
    sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
    sa.Column("is_deleted", sa.Boolean(), server_default=sa.text("FALSE"), nullable=False),
    sa.CheckConstraint("compare_at_price > price OR compare_at_price IS NULL", name=op.f("ck_product_prices_ck_product_prices_compare_at_price")),
    sa.CheckConstraint("price > 0", name=op.f("ck_product_prices_ck_product_prices_price_positive")),
    sa.ForeignKeyConstraint(["product_id"], ["ecommerce.products.id"], name=op.f("fk_product_prices_product_id_products"), ondelete="CASCADE"),
    sa.PrimaryKeyConstraint("id", name=op.f("pk_product_prices")),
    sa.UniqueConstraint("product_id", "currency_code", "valid_from", name="uq_product_prices_product_currency_valid_from"),
    schema="ecommerce"
    )
    op.create_table("product_variants",
    sa.Column("product_id", sa.UUID(as_uuid=False), nullable=False),
    sa.Column("sku", sa.String(length=100), nullable=False),
    sa.Column("name", sa.String(length=255), nullable=False),
    sa.Column("attributes", postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False),
    sa.Column("is_active", sa.Boolean(), server_default=sa.text("TRUE"), nullable=False),
    sa.Column("display_order", sa.Integer(), server_default=sa.text("0"), nullable=False),
    sa.Column("id", sa.UUID(as_uuid=False), server_default=sa.text("UUID_GENERATE_V7()"), nullable=False),
    sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
    sa.Column("is_deleted", sa.Boolean(), server_default=sa.text("FALSE"), nullable=False),
    sa.ForeignKeyConstraint(["product_id"], ["ecommerce.products.id"], name=op.f("fk_product_variants_product_id_products"), ondelete="CASCADE"),
    sa.PrimaryKeyConstraint("id", name=op.f("pk_product_variants")),
    sa.UniqueConstraint("sku", name=op.f("uq_product_variants_sku")),
    schema="ecommerce"
    )
    op.create_table("reviews",
    sa.Column("product_id", sa.UUID(as_uuid=False), nullable=False),
    sa.Column("customer_id", sa.UUID(as_uuid=False), nullable=True),
    sa.Column("order_id", sa.UUID(as_uuid=False), nullable=True),
    sa.Column("rating", sa.Integer(), nullable=False),
    sa.Column("title", sa.String(length=255), nullable=True),
    sa.Column("comment", sa.Text(), nullable=True),
    sa.Column("is_verified_purchase", sa.Boolean(), server_default=sa.text("FALSE"), nullable=False),
    sa.Column("helpful_count", sa.Integer(), server_default=sa.text("0"), nullable=False),
    sa.Column("unhelpful_count", sa.Integer(), server_default=sa.text("0"), nullable=False),
    sa.Column("moderation_status", sa.String(length=50), server_default=sa.text("'pending'"), nullable=False),
    sa.Column("published_at", sa.DateTime(timezone=True), nullable=True),
    sa.Column("id", sa.UUID(as_uuid=False), server_default=sa.text("UUID_GENERATE_V7()"), nullable=False),
    sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
    sa.Column("is_deleted", sa.Boolean(), server_default=sa.text("FALSE"), nullable=False),
    sa.CheckConstraint("moderation_status IN ('pending', 'approved', 'rejected', 'flagged')", name=op.f("ck_reviews_ck_reviews_moderation_status")),
    sa.CheckConstraint("rating >= 1 AND rating <= 5", name=op.f("ck_reviews_ck_reviews_rating_range")),
    sa.ForeignKeyConstraint(["customer_id"], ["ecommerce.customers.id"], name=op.f("fk_reviews_customer_id_customers")),
    sa.ForeignKeyConstraint(["order_id"], ["ecommerce.orders.id"], name=op.f("fk_reviews_order_id_orders")),
    sa.ForeignKeyConstraint(["product_id"], ["ecommerce.products.id"], name=op.f("fk_reviews_product_id_products"), ondelete="CASCADE"),
    sa.PrimaryKeyConstraint("id", name=op.f("pk_reviews")),
    schema="ecommerce"
    )
    op.create_table("cart_items",
    sa.Column("id", sa.UUID(as_uuid=False), server_default=sa.text("UUID_GENERATE_V7()"), nullable=False),
    sa.Column("cart_id", sa.UUID(as_uuid=False), nullable=False),
    sa.Column("product_id", sa.UUID(as_uuid=False), nullable=False),
    sa.Column("product_variant_id", sa.UUID(as_uuid=False), nullable=True),
    sa.Column("quantity", sa.Integer(), nullable=False),
    sa.Column("price_cents", sa.Integer(), nullable=False),
    sa.Column("cart_item_metadata", postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False),
    sa.Column("added_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
    sa.Column("is_deleted", sa.Boolean(), server_default=sa.text("FALSE"), nullable=False),
    sa.CheckConstraint("price_cents >= 0", name=op.f("ck_cart_items_ck_cart_items_price_non_negative")),
    sa.CheckConstraint("quantity > 0", name=op.f("ck_cart_items_ck_cart_items_quantity_positive")),
    sa.ForeignKeyConstraint(["cart_id"], ["ecommerce.carts.id"], name=op.f("fk_cart_items_cart_id_carts"), ondelete="CASCADE"),
    sa.ForeignKeyConstraint(["product_id"], ["ecommerce.products.id"], name=op.f("fk_cart_items_product_id_products")),
    sa.ForeignKeyConstraint(["product_variant_id"], ["ecommerce.product_variants.id"], name=op.f("fk_cart_items_product_variant_id_product_variants")),
    sa.PrimaryKeyConstraint("id", name=op.f("pk_cart_items")),
    schema="ecommerce"
    )
    op.create_table("inventory",
    sa.Column("product_id", sa.UUID(as_uuid=False), nullable=False),
    sa.Column("product_variant_id", sa.UUID(as_uuid=False), nullable=True),
    sa.Column("location_id", sa.UUID(as_uuid=False), nullable=False),
    sa.Column("quantity_on_hand", sa.Integer(), server_default=sa.text("0"), nullable=False),
    sa.Column("quantity_reserved", sa.Integer(), server_default=sa.text("0"), nullable=False),
    sa.Column("quantity_available", sa.Integer(), server_default=sa.text("0"), nullable=False),
    sa.Column("reorder_point", sa.Integer(), nullable=True),
    sa.Column("reorder_quantity", sa.Integer(), nullable=True),
    sa.Column("last_counted_at", sa.DateTime(timezone=True), nullable=True),
    sa.Column("id", sa.UUID(as_uuid=False), server_default=sa.text("UUID_GENERATE_V7()"), nullable=False),
    sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
    sa.Column("is_deleted", sa.Boolean(), server_default=sa.text("FALSE"), nullable=False),
    sa.Column("version", sa.Integer(), server_default=sa.text("1"), nullable=False),
    sa.CheckConstraint("quantity_available = quantity_on_hand - quantity_reserved", name=op.f("ck_inventory_ck_inventory_quantity_available_calculation")),
    sa.CheckConstraint("quantity_on_hand >= 0", name=op.f("ck_inventory_ck_inventory_quantity_on_hand_non_negative")),
    sa.CheckConstraint("quantity_reserved >= 0", name=op.f("ck_inventory_ck_inventory_quantity_reserved_non_negative")),
    sa.ForeignKeyConstraint(["location_id"], ["ecommerce.locations.id"], name=op.f("fk_inventory_location_id_locations")),
    sa.ForeignKeyConstraint(["product_id"], ["ecommerce.products.id"], name=op.f("fk_inventory_product_id_products")),
    sa.ForeignKeyConstraint(["product_variant_id"], ["ecommerce.product_variants.id"], name=op.f("fk_inventory_product_variant_id_product_variants")),
    sa.PrimaryKeyConstraint("id", name=op.f("pk_inventory")),
    sa.UniqueConstraint("product_id", "product_variant_id", "location_id", name="uq_inventory_product_variant_location"),
    schema="ecommerce"
    )
    op.create_table("order_items",
    sa.Column("id", sa.UUID(as_uuid=False), server_default=sa.text("UUID_GENERATE_V7()"), nullable=False),
    sa.Column("order_id", sa.UUID(as_uuid=False), nullable=False),
    sa.Column("product_id", sa.UUID(as_uuid=False), nullable=False),
    sa.Column("product_variant_id", sa.UUID(as_uuid=False), nullable=True),
    sa.Column("sku", sa.String(length=100), nullable=False),
    sa.Column("name", sa.String(length=255), nullable=False),
    sa.Column("quantity", sa.Integer(), nullable=False),
    sa.Column("unit_price_cents", sa.Integer(), nullable=False),
    sa.Column("discount_cents", sa.Integer(), server_default=sa.text("0"), nullable=False),
    sa.Column("tax_cents", sa.Integer(), server_default=sa.text("0"), nullable=False),
    sa.Column("line_total_cents", sa.Integer(), nullable=False),
    sa.Column("item_metadata", postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False),
    sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.CheckConstraint("discount_cents >= 0", name=op.f("ck_order_items_ck_order_items_discount_non_negative")),
    sa.CheckConstraint("line_total_cents = (quantity * unit_price_cents) - discount_cents + tax_cents", name=op.f("ck_order_items_ck_order_items_line_total_calculation")),
    sa.CheckConstraint("quantity > 0", name=op.f("ck_order_items_ck_order_items_quantity_positive")),
    sa.CheckConstraint("tax_cents >= 0", name=op.f("ck_order_items_ck_order_items_tax_non_negative")),
    sa.CheckConstraint("unit_price_cents >= 0", name=op.f("ck_order_items_ck_order_items_unit_price_non_negative")),
    sa.ForeignKeyConstraint(["order_id"], ["ecommerce.orders.id"], name=op.f("fk_order_items_order_id_orders"), ondelete="CASCADE"),
    sa.ForeignKeyConstraint(["product_id"], ["ecommerce.products.id"], name=op.f("fk_order_items_product_id_products")),
    sa.ForeignKeyConstraint(["product_variant_id"], ["ecommerce.product_variants.id"], name=op.f("fk_order_items_product_variant_id_product_variants")),
    sa.PrimaryKeyConstraint("id", name=op.f("pk_order_items")),
    schema="ecommerce"
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("order_items", schema="ecommerce")
    op.drop_table("inventory", schema="ecommerce")
    op.drop_table("cart_items", schema="ecommerce")
    op.drop_table("reviews", schema="ecommerce")
    op.drop_table("product_variants", schema="ecommerce")
    op.drop_table("product_prices", schema="ecommerce")
    op.drop_table("payments", schema="ecommerce")
    op.drop_table("products", schema="ecommerce")
    op.drop_table("payment_methods", schema="ecommerce")
    op.drop_index("idx_orders_status", table_name="orders", schema="ecommerce")
    op.drop_index("idx_orders_customer_id", table_name="orders", schema="ecommerce")
    op.drop_index("idx_orders_created_at", table_name="orders", schema="ecommerce")
    op.drop_table("orders", schema="ecommerce")
    op.drop_table("customer_pii", schema="ecommerce")
    op.drop_table("customer_consents", schema="ecommerce")
    op.drop_table("carts", schema="ecommerce")
    op.drop_table("addresses", schema="ecommerce")
    op.drop_table("locations", schema="ecommerce")
    op.drop_table("customers", schema="ecommerce")
    op.drop_table("categories", schema="ecommerce")
    op.drop_table("audit_log", schema="audit")

    # Drop functions
    op.execute(audit_trigger_function.to_sql_statement_drop())
    op.execute(uuid_generate_v7_precise.to_sql_statement_drop())
    op.execute(uuid_generate_v7.to_sql_statement_drop())
    # ### end Alembic commands ###
